#include "imports/stdlib.fc";
#include "constants.fc";
#include "utils.fc";

;; data globals
global int data::public_key;
global slice data::jetton_wallet;
global slice data::admin;
global cell data::helper_code;

;; context globals
global int context::bounced?;
global int context::op;
global int context::query_id;
global slice context::sender;

() load_data() impure {
    slice ds = get_data().begin_parse();
    data::public_key = ds~load_uint(256);
    data::jetton_wallet = ds~load_msg_addr();
    data::admin = ds~load_msg_addr();
    data::helper_code = ds~load_ref();
}

() save_data() impure {
    set_data(begin_cell()
        .store_uint(data::public_key, 256)
        .store_slice(data::jetton_wallet)
        .store_slice(data::admin)
        .store_ref(data::helper_code)
    .end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() < 96) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    context::bounced? = cs~load_uint(4) & 1;
    if (context::bounced?) {
        in_msg_body~skip_bits(32);
    }
    context::sender = cs~load_msg_addr();
    context::op = in_msg_body~load_uint(32);
    context::query_id = in_msg_body~load_uint(64);

    load_data();

    if (context::bounced?) {

    }

    elseif (context::op == op::deploy) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::admin));
        
        data::jetton_wallet = in_msg_body~load_msg_addr();
        
        in_msg_body.end_parse();
    }

    elseif (context::op == op::claim) {
        throw_unless(error::not_enough_value, msg_value >= (const::ton_for_fees * 5 + const::ton_for_storage));

        slice signature = in_msg_body~load_bits(512);
        cell data = in_msg_body~load_ref();

        throw_unless(error::wrong_signature, check_signature(data.cell_hash(), signature, data::public_key));

        slice s = data.begin_parse();
        slice task = s~load_msg_addr();
        slice user = s~load_msg_addr();
        slice referrer = s~load_msg_addr();
        int reward = s~load_coins();
        int valid_until = s~load_uint(64);

        throw_unless(error::wrong_sender, equal_slices(context::sender, user));
        throw_unless(error::wrong_task, equal_slices(my_address(), task));
        throw_unless(error::wrong_time, now() <= valid_until);
        
        cell init = compose_init(data::helper_code, begin_cell()
            .store_int(false, 1)
            .store_slice(user)
            .store_slice(my_address())
            .store_uint(0, 32)
        .end_cell());

        send_msg_with_body_and_init(
            false,
            calculate_address(init),
            0,
            compose_body(op::check_claim, context::query_id, begin_cell()
                .store_slice(referrer)
                .store_coins(reward)
            ),
            init,
            64
        );
    }

    elseif (context::op == op::confirm_claim) {
        slice user = in_msg_body~load_msg_addr();
        int reward = in_msg_body~load_coins();

        cell init = compose_init(data::helper_code, begin_cell()
            .store_int(false, 1)
            .store_slice(user)
            .store_slice(my_address())
            .store_uint(0, 32)
        .end_cell());
        
        throw_unless(error::wrong_sender, equal_slices(context::sender, calculate_address(init)));

        send_msg_with_body(
            false,
            data::jetton_wallet,
            0,
            compose_body(op::jetton::transfer, context::query_id, begin_cell()
                .store_coins(reward)
                .store_slice(user)
                .store_slice(user)
                .store_uint(0, 1)
                .store_coins(1)
                .store_uint(0, 1)
            ),
            64
        );
    }

    elseif (context::op == op::send_service_message) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::admin));

        cell message = in_msg_body~load_ref();
        int mode = in_msg_body~load_uint(8);

        send_raw_message(message, mode);
    }

    else {
        throw(0xffff);
    }

    save_data();
}
